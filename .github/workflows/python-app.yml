name: Python Tests & Code Quality

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pytest pytest-cov requests pandas flask flask-cors

    - name: Lint mit flake8 (Syntaxprüfung)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Code-Formatierung prüfen mit Black
      run: |
        black --check .

    - name: Starte Flask-Server im Hintergrund
      run: |
        python app.py & sleep 3

    - name: Tests mit pytest + Coverage-Analyse
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing

    - name: Coverage-Bericht als Artefakt speichern
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

    - name: Coverage-Check (100% Testabdeckung erforderlich)
      run: |
        coverage_percentage=$(pytest --cov=app | grep "TOTAL" | awk '{print $4}' | tr -d '%')
        if [ "$coverage_percentage" -lt 100 ]; then
          echo "Test Coverage ist nur ${coverage_percentage}%, aber 100% ist erforderlich!"
          exit 1
        fi